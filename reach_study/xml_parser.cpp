#include <string>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <vector>
#include "xml_parser.hpp"

/*
 * @Author Natalie Chmura
 * 
 * @Description
 * This program takes the results generated by the reach study (done in xml format) and parses those results into a list of data structs.
 * This parsing is done by leveraging rapidxml! 
*/

    //XML structure:
    //<xml version...>
    //<!DOCTYPE...>
    //<boost_serilization...>
    //<db ... >
    //  <results ...>
    //      <count>
    //      <item_version ...>
    //      <item_class_id>
    //          <count>
    //          <item_version>
    //          <item>
    //              <reached>
    //              <goal>
    //                  <matrix>
    //                      <count>
    //                      <item>...</item>
    //                      <item>...</item>
    //                      x16 (overall, 14 more)
    //                  </matrix>
    //              </goal>
    //              <score>...</score>
    //          </item>
    //          xhowever nny more points there are in the file!

void parseXML(std::string fname) {
    rapidxml::xml_document<> doc;
    rapidxml::xml_node<> * root_node;
    //Read the file into a vector
    std::ifstream theFile (fname);
    std::vector<char> buffer((std::istreambuf_iterator<char>(theFile)), std::istreambuf_iterator<char>());
	buffer.push_back('\0');
	// Parse the buffer using the xml file parsing library into doc 
	doc.parse<0>(&buffer[0]);
    //Find the root of the data, in our case, boost_serialization
    root_node = doc.first_node(0);
    //root_node = root_node->next_sibling("db");


    rapidxml::xml_node<> * item_node = descendToItem(root_node);
}

rapidxml::xml_node<> * descendToItem(rapidxml::xml_node<> * root_node){

    //TEST TEST TEST START

    std::string sttr = root_node->first_attribute()->value();

    std::cout << sttr << std::endl;

    //TEST TEST TEST END

    return root_node;

}
    

int main(int argc, char **argv) { //Used in manual testing, the actual func written above does the brunt of it (and should be able to be called elsewhere)

    parseXML(argv[1]);

    return 0;
}